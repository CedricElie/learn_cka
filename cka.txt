KODEKLOUD K8S
===================


ETCD - Commands

ETCDCTL version 2 supports the following commands:

etcdctl backup
etcdctl cluster-health
etcdctl mk
etcdctl mkdir
etcdctl set

 in version 3

etcdctl snapshot save
etcdctl endpoint health
etcdctl get
etcdctl put

To set the right version of API set the environment variable ETCDCTL_API command

export ETCDCTL_API=3


kubectl exec etcd-master -n kube-system — sh -c “ETCDCTL_API=3 etcdctl get / –prefix –keys-only –limit=10 –cacert /etc/kubernetes/pki/etcd/ca.crt –cert /etc/kubernetes/pki/etcd/server.crt –key /etc/kubernetes/pki/etcd/server.key”


Replication controler (Replica set)
-----------  replication conroller definition ---------------
apiVersion: v1
kind: ReplicationController
metadata:
	name: myapp-rc
	labels:
		app: myapp
		type: front-end
spec:
	-template:
		matadata:
			name: myapp-pod
			labels:
				app: myapp
				type: front-end
		spec:
			contianers:
			- name: nginx-container
			  image: nginx
	replicas: 3
	
	
-----------  replicaset definition ---------------
apiVersion: apps/v1
kind: ReplicaSet
metadata:
	name: myapp-replicaset
	labels:
		app: myapp
		type: front-end
spec:
	template:
		matadata:
			name: myapp-pod
			labels:
				app: myapp
				type: front-end
		spec:
			contianers:
			- name: nginx-container
			  image: nginx
	replicas: 3
	selector: 
		matchLabels:
			tier: front-end
			
				
$kubectl replace -f replicaset-definition.yml
$kubectl scale --replicas=6 -f replicaset-definition.yml
$kubectl scale --replicas=6 replicaset myapp-replicaset
		
		
----------------------   DEPLOYMENTS ---------------

apiVersion: apps/v1
kind: Deployment
metadata:
	name: myapp-deployment
	labels:
		app: myapp
		type: front-end
spec:
	template:
		matadata:
			name: myapp-pod
			labels:
				app: myapp
				type: front-end
		spec:
			contianers:
			- name: nginx-container
			  image: nginx
	replicas: 3
	selector: 
		matchLabels:
			tier: front-end


Create an NGINX Pod

https://kubernetes.io/docs/reference/kubectl/conventions/

> kubectl run nginx --image=nginx

Generate POD Manifest YAML file (-o yaml). Don’t create it(–dry-run)

> kubectl run nginx --image=nginx --dry-run=client -o yaml

Create a deployment

> kubectl create deployment --image=nginx nginx

Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run)

> kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run) with 4 Replicas (–replicas=4)

> kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

Save it to a file, make necessary changes to the file (for example, adding more replicas) and then create the deployment.

> kubectl create -f nginx-deployment.yaml


----------------------   NAMESPACES  ---------------

kube-system
Default
kube-public

are default namespaces

You can create your own namespaces


apiVersion: v1
kind: Namespace 
metadata:
	name: dev
	
kubectl create -f namespace-dev.yml

To fix teh namespace

> kubectl config set-context $(kubectl config current-context) --namespace=dev

Ressource Quota

apiVersion: v1
kind: ResrouceQuota
metadata:
	name: compute-quota
	namespace: dev
spec:
	hard:
		pods: "10"
		reruests.cpi:"4"
		requests.memory: 5Gi
		limitsdev
		
		
		


--------------------------------  SERVICES  --------------------


apiVersion: v1
kind: Service 
metadata:
	name: myapp-service 
spec:
	type: NodePort
	ports:
	 - targetPort: 80
	   port: 80
	   nodePort: 30008
	selector:
		app: myapp
		type: front-end
----
apiVersion: v1
kind: Service 
metadata:
	name: back-end 
spec:
	type: ClusterIP
	ports:
	 - targetPort: 80
	   port: 80
	   
	selector:
		app: myapp
		type: back-end
----
apiVersion: v1
kind: Service 
metadata:
	name: myapp-service 
spec:
	type: LoadBalancer
	ports:
	 - targetPort: 80
	   port: 80
	   nodePort: 30008


--
some kubectl commands
=======================

kubectl run --image=nginx nginx

kubectl create deployment --image=nginx nginx

kubectl expose deployment nginx --port 80

kubectl edit deployment nginx

kubectl scale deployment nginx --replicas=5

kubectl set image deployment nginx nginx=nginx:1.18

kubectl create -f nginx.yaml
kubectl replace -f nginx.yaml
kubectl replace --force -f nginx.yaml
kubectl delete -f nginx.yaml
